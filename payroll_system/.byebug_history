c
user.salaries.find_by(salary_month: params[:payslip][:slip_month])
sal_attend
c
sal
@attend
@sal
c
unpaid_intial_value
unpaid_initial_value
paid_initial_value
c
total_duration
c
total_duration
c
total_duration
c
total_duration
c
total_duration
c
month_leave
c
@leave.where("(start_date BETWEEN ? AND ?) OR (end_date BETWEEN ? AND ?)", attendance_date.beginning_of_month,
    attendance_date.end_of_month, attendance_date.beginning_of_month,attendance_date.end_of_month)
c
month_leave
c
@leave.where("(start_date BETWEEN ? AND ?) OR (end_date BETWEEN ? AND ?)", attendance_date.beginning_of_month,
    attendance_date.end_of_month, attendance_date.beginning_of_month,attendance_date.end_of_month)
attendance_date.beginning_of_month
c
@leave.where("cast(strftime('%M', start_date) as int) = ?", attendance_month)c
@leave.where("cast(strftime('%M', start_date) as int) = ?", attendance_month)
a
a = @leave.where(start_date: "2023-02-09")
a = @leave.where("start_date" = "2023-02-09")
@leave
month_leave
c
"cast(strftime('%M', start_date) as int) = ?", attendance_month
attendance_month
c
cc
c
@leave
@leave.start_date
@leave.where("cast(strftime('%M', start_date) as int) = ?", attendance_month)
c
month_leave
c
attendance_month
c
attendance_date
c
active_leaves
c
active_leaves.leave_duration
active_leave.leave_duration
active_leaves.class
active_leaves.type
active_leaves
c
active_leaves
c
paid_array
c
active_leaves.where(leave_type: "Paid")
paid_array
c
active_leaves.where(leave_type: "Paid")
active_user.where(leave_type: "Paid")
active_leaves.where(leave_type: "Unpaid")
active_leaves
c
user.leave_balances
active_leaves
active_leaves.where(leave_type: "Unpaid")
active_leaves
c
unpaid_array
c
unpaid_array
active_user
c
unpaid_array
c
active_user
c
user.leave_balances.where(leave_duration: "Active")
c
unpaid_final_value
c
unpaid_excess_value
unpaid_intial_value
unpaid_final_value
unpaid_excess_value
c
paid_initial_value
paid_intial_value
unpaid_excess_value
c
@tot_paid_leaves
c
@tot_paid_leaves
unpaid_intial_value
c
paid_initial_value
c
unpaid_intial_value
c
@leave_sum
c
@leave_sum
c
user.leave_balances.where(leave_type: "Paid")
c
user.leave_balances.where(leave_type: "Unpaid")
c
params
c
params
c
user.leaves
user.leaves=
user.leave
user.leaves
user.leaves.where(leave_type: "Unpaid")
attendance
user
c
load_and_authorize_resource
c
authenticate_user
:authenticate_user
c
@role.user
role.user
@user.role
c
role
roll
Role.connection
role
Role
user
user.role_id
User.all
user.role_id
User.role_id
user
Role
roles
role
user
user.role
c
AttendanceCut.add_number
AttendanceCut.new(attend, sal_attend)
c
AttendanceCut.calculate_attend_cut(attend,sal_attend)
AttendanceCut
AttendanceCalculator.new(attendance).calculate_attend_rate
c
cc
c
AttendanceCalculator.new(attendance).calculate_attend_rate
AttendanceCalculator
AttendanceCalculator.new(attendance)
c
AttendanceCut
AttendanceCut.new(attend, sal_attend)
c
AttendanceCut.new(attend, sal_attend).calculate_attendance_cut
c
user.salaries.find_by(salary_month: params[:payslip][:slip_month])
ser.salaries.find_by(salary_month: params[:payslip][:slip_month])
c
user.attendances.find_by(attendance_month: params[:payslip][:slip_month])
user
c
((@tot_work_days - unpaid_value)/(@tot_work_days)) * 100
c
@unpaid_leaves.to_f
((@tot_work_days - unpaid_value)/(@tot_work_days)) * 100
@tot_work_days
c
@tot_work_days
c
work_days
@work_days
c
$work_days = AttendanceCalculator.new(attendance).calculate_work_days
c
@attendance_month.to_date
c
attendance_month.to_date
c
@work_days
c
work_days
@user_id
@unpaid_leaves
@attendance_month
c
attendance_params[:attendance_month].to_date
c
@attendance.tot_work_days
c
@attendance
c
@attendance
c
@attendance
c
attendance
@attendance
c
@attendance
attendance
c
$deduction
c
deduct_limit
c
@slip_time.exists?{|element| element[:deduct_type] == "NPS"}
@slip_time.exists{|element| element[:deduct_type] == "NPS"}
@slip_time.exist{|element| element[:deduct_type] == "NPS"}
@slip_time.find_by{|element| element[:deduct_type] == "NPS"}
@slip_time.where{|element| element[:deduct_type] == "NPS"}
@slip_time
@slip_time.find{|element| element[:deduct_type] == "NPS"}
c
@slip_time
c
@slip_time
c
@slip_time
c
@user.tax_deductions.where("cast(strftime('%Y', financial_year) as int) = ?", slip_year)
c
@user.salaries.find_by(salary_date: params[:payslip][:slip_month])
slip_year
@slip_year
c
$tax_sal
c
@user.tax_deductions.where("cast(strftime('%Y', financial_year) as int) = ?", slip_year)
c
@user.tax_deduction.where("cast(strftime('%Y', financial_year) as int) = ?", slip_year)
c
@user.salaries.find_by(salary_date: params[:payslip][:slip_month])
slip_year
$tax_sal
c
